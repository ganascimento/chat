{"version":3,"sources":["store/User/types.ts","store/User/reducer.ts","store/Friend/types.ts","store/Friend/reducer.ts","store/Talk/types.ts","store/Talk/reducer.ts","store/Invite/types.ts","store/Invite/reducer.ts","store/SelectedTalk/types.ts","store/SelectedTalk/reducer.ts","store/rootReducer.ts","services/auth.ts","services/api.ts","store/User/sagas.ts","store/Invite/sagas.ts","store/rootSaga.ts","store/index.ts","util/routes.tsx","services/signalr.ts","store/User/actions.ts","store/Talk/actions.ts","store/Invite/actions.ts","store/Friend/actions.ts","store/SelectedTalk/actions.ts","pages/Chat/Talk/styles.tsx","commonStyles/styles.tsx","pages/Chat/Talk/index.tsx","pages/Chat/Message/styles.tsx","pages/Chat/Message/index.tsx","pages/Chat/SendBar/styles.tsx","pages/Chat/SendBar/index.tsx","pages/Chat/Invite/styles.tsx","pages/Chat/Invite/index.tsx","pages/Chat/Friends/styles.tsx","pages/Chat/Friends/index.tsx","pages/Chat/ModalLogout/index.tsx","pages/Chat/UserInfoBar/styles.tsx","pages/Chat/UserInfoBar/index.tsx","pages/Chat/styles.tsx","pages/Chat/index.tsx","pages/Login/FormLogin/styles.tsx","pages/Login/FormLogin/index.tsx","pages/Login/FormRegister/styles.tsx","pages/Login/FormRegister/index.tsx","pages/Login/styles.tsx","pages/Login/index.tsx","index.tsx"],"names":["UserActionTypes","FriendActionTypes","initialState","authenticated","fail","loading","data","undefined","registerError","reducer","state","action","type","LoadFailure","LoadSuccess","payload","LoadRequest","LoginRequest","RegisterRequest","RegisterFailure","ResetState","TalkActionTypes","InviteActionTypes","completed","SetTalk","SelectedTalkActionTypes","invites","SetPersons","LoadSuccessInvites","SetInvitation","invitation","SetSelectTalk","combineReducers","user","friend","talk","invite","selectedTalk","TOKEN_KEY","AUTH","isAuthenticated","localStorage","getItem","expiration","Date","parse","toString","logout","getToken","login","token","setItem","removeItem","api","axios","create","baseURL","interceptors","request","use","a","config","headers","Authorization","register","load","init","call","post","Email","email","Password","password","response","loginApp","accessToken","put","Name","name","Avatar","avatar","status","get","id","friends","talks","invitations","forEach","item","push","chats","usersInvitations","person","userSentId","getPersons","persons","search","ehSent","rootSaga","all","takeLatest","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","run","PrivateRoute","Component","component","rest","render","props","to","pathname","from","location","SignalR","this","connection","start","stop","signalR","withUrl","accessTokenFactory","build","UserDispatcher","dispatch","loadRequest","loginRequest","registerRequest","resetState","TalkDispatcher","setTalk","InviteDispatcher","setPersons","setInvites","FriendDispatcher","setFriends","SelectedTalkDispatcher","ContentTalk","styled","div","ContentUserInfo","ContentUserImg","Icon","FontAwesomeIcon","ContentInfos","TextName","p","TextLastMessage","IconMyMessage","ContentPendMessage","BackArrow","ContentIcon","IconPerson","Img","img","HoverImg","Header","ContentPerson","ContentFriend","LoginHeader","Row","LoginButton","input","ActionButton","InputIconContent","IconAnimation","keyframes","IconError","LoginTopIcon","LoginContentInput","LoginInput","ContentErrorMessage","Talk","pendingMessages","checkPending","onClick","handleSetTalk","src","icon","faUser","checkOwner","faCheck","lastMessage","CommonContent","ContentLeftMessage","ContentRightMessage","Message","sent","text","ContentSendBar","InputMsg","SendBtn","SendBar","useState","setText","userState","useSelector","talksState","useDispatch","talkDispatcher","handleSendMessage","trim","message","pending","sendDate","messages","invoke","UserSentId","ConversationId","conversationId","Text","Pending","SendDate","format","now","replace","friendId","value","onChange","event","currentTarget","onKeyDown","keyCode","faPaperPlane","ContentAvatar","AddButton","ContentInput","Input","SearchBtn","ContentPersons","ContentLoader","Invite","inviteState","inviteDispatcher","friendContent","key","userId","Refused","UserReceivedId","RequestDate","map","handleSendInvite","faArrowLeft","toggleMenu","placeholder","faSearch","color","height","TypeAnimation","ContentTag","InviteButton","backColor","backColorHover","ContentPlusIcon","OpenMenuInvite","CloseMenuInvite","ContentInvite","ContentInviteBtn","Friends","friendState","Default","startAnimation","setStartAnimation","invitationDispatcher","handleToggleMenuInvite","Close","Open","handleAceptInvite","inviteId","adjustInvites","handleDeclineInvite","filter","handleSelectTalk","faPlus","idInvite","inviteContent","personContent","Transition","React","forwardRef","ref","Slide","direction","ModalLogout","Dialog","open","openModal","TransitionComponent","keepMounted","onClose","handleOpenModel","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","handleLogout","ContentUserInfoBar","ContentRightIcon","UserInfoBar","setOpenModal","logoutChat","setLogoutChat","handleModalLogout","Stop","toggleImg","faUsers","faSignOutAlt","CommonFlex","Main","Body","Section","TalkSection","MessageSection","BarSection","shadow","ContentMessage","OpenMenuFriends","CloseMenuFriends","FriendsMenu","LoadText","ContentLoad","ContentNoTalk","ContentFriendBar","ContentFriendBarTexts","ContentFriendBarOnline","ContentViewImg","ViewImg","Chat","people","setPeople","ehRegister","setEhRegister","ehModalImgFriend","setEhModalImgFriend","ehModalMyImg","setEhModalMyImg","talkState","selectedTalkState","userDispatcher","friendDispatcher","selectedTalkDispatcher","friendSelected","useEffect","element","document","getElementById","scrollTop","scrollHeight","Start","peopleList","length","registerEventUseSelectedTalk","registerEvents","off","on","receivedMsg","newMessage","friendUser","isOnline","handleToggleMenuFriends","personId","hasPending","msg","talkSelected","checkOwnerLastMassege","checkAmountPendMessage","handleToggleFriendImgModal","handleToggleMyImgModal","index","alt","mainContent","Check","Checkbox","FormLogin","setLogin","setPassword","check","setCheck","loginError","setLoginError","passwordError","setPasswordError","auth","authJson","JSON","getAuth","onSubmit","preventDefault","valid","test","stringify","setAuth","faEnvelope","maxLength","faLock","hasError","handleFormRegister","ContentFileUpload","label","UploadFile","FormRegister","setName","confirmPassword","setConfirmPassword","setAvatar","nameError","setNameError","confirmPasswordError","setConfirmPasswordError","emailExists","setLength","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","handleFileSelected","target","files","imageBase64","amountErrors","split","htmlFor","faCamera","accept","multiple","size","Footer","Login","registerContent","setRegisterContent","lengthBodyRegister","setLengthBodyRegister","ReactDOM","exact","path"],"mappings":"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","file":"static/js/main.1b372f7d.chunk.js","sourcesContent":["import { Action } from 'redux';\r\n\r\nexport interface User {\r\n    id?: number;\r\n    name?: string;\r\n    avatar?: string;\r\n    email: string;\r\n    password?: string;\r\n}\r\n\r\nexport interface UserDispatchAction extends Action<UserActionTypes> {\r\n    payload?: User;\r\n}\r\n\r\nexport enum UserActionTypes {\r\n    LoadSuccess = 'LOAD_SUCCESS_USER',\r\n    LoadFailure = 'LOAD_FAILURE_USER',\r\n    LoadRequest = 'LOAD_REQUEST_USER',\r\n    LoginRequest = 'LOGIN_REQUEST_USER',\r\n    RegisterRequest = 'REGISTER_REQUEST_USER',\r\n    RegisterFailure = 'REGISTER_FAILURE_USER',\r\n    ResetState = 'RESET_STATE_USER'\r\n}\r\n\r\nexport interface UserState {\r\n    readonly data?: User;\r\n    readonly loading: boolean;\r\n    readonly fail: boolean;\r\n    readonly authenticated: boolean;\r\n    readonly registerError?: boolean;\r\n}","import { Reducer } from 'redux';\r\nimport { UserState, UserActionTypes } from './types';\r\n\r\nconst initialState: UserState = {\r\n    authenticated: false,\r\n    fail: false,\r\n    loading: false,\r\n    data: undefined,\r\n    registerError: false\r\n}\r\n\r\nconst reducer: Reducer<UserState> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UserActionTypes.LoadFailure:\r\n            return { ...state, data: undefined, loading: false, authenticated: false, fail: true, registerError: false };\r\n        case UserActionTypes.LoadSuccess:\r\n            return { ...state, data: action.payload, loading: false, authenticated: true, fail: false, registerError: false };\r\n        case UserActionTypes.LoadRequest:\r\n            return { ...state, data: undefined, loading: true, authenticated: false, fail: false, registerError: false };\r\n        case UserActionTypes.LoginRequest:\r\n            return { ...state, data: action.payload, loading: true, authenticated: false, fail: false, registerError: false };\r\n        case UserActionTypes.RegisterRequest:\r\n            return { ...state, data: action.payload, loading: true, authenticated: false, fail: false, registerError: false };\r\n        case UserActionTypes.RegisterFailure:\r\n            return { ...state, data: undefined, loading: false, authenticated: false, fail: false, registerError: true };\r\n        case UserActionTypes.ResetState:\r\n            return { ...state, data: undefined, loading: false, authenticated: false, fail: false, registerError: false };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { Action } from 'redux';\r\n\r\nexport interface Friend {\r\n    id: number;\r\n    name: string;\r\n    email: string;\r\n    avatar?: string;\r\n    isOnline: boolean;\r\n}\r\n\r\nexport interface FriendDispatchAction extends Action<FriendActionTypes> {\r\n    payload?: Friend[];\r\n}\r\n\r\nexport enum FriendActionTypes {\r\n    LoadSuccess = 'LOAD_SUCCESS_FRIEND',\r\n    LoadFailure = 'LOAD_FAILURE_FRIEND',\r\n    LoadRequest = 'LOAD_REQUEST_FRIEND'\r\n}\r\n\r\nexport interface FriendState {\r\n    readonly loading: boolean;\r\n    readonly fail: boolean;\r\n    readonly data?: Friend[];\r\n}","import { FriendActionTypes, FriendState } from './types';\r\nimport { Reducer } from 'redux'\r\n\r\nexport const initialState: FriendState = {\r\n    loading: false,\r\n    fail: false,\r\n    data: undefined\r\n};\r\n\r\nconst reducer: Reducer<FriendState> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FriendActionTypes.LoadSuccess:\r\n            return { ...state, data: action.payload, loading: false, fail: false }\r\n        case FriendActionTypes.LoadFailure:\r\n            return { ...state, data: undefined, loading: false, fail: true }\r\n        case FriendActionTypes.LoadRequest:\r\n            return { ...state, data: action.payload, loading: true, fail: false }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { Action } from 'redux';\r\nimport { Message } from './../Message/types';\r\n\r\nexport interface Talk {\r\n    conversationId: string;\r\n    friendId?: number;\r\n    messages: Message[];\r\n}\r\n\r\nexport interface TalkDispatchAction extends Action<TalkActionTypes> {\r\n    payload?: Talk[];\r\n}\r\n\r\nexport enum TalkActionTypes {\r\n    LoadSuccess = 'LOAD_SUCCESS_TALK',\r\n    LoadFailure = 'LOAD_FAILURE_TALK',\r\n    LoadRequest = 'LOAD_REQUEST_TALK',\r\n    SetTalk = 'SET_TALK'\r\n}\r\n\r\nexport interface TalkState {\r\n    readonly loading: boolean;\r\n    readonly fail: boolean;\r\n    readonly completed: boolean;\r\n    readonly data?: Talk[];\r\n}","import { TalkActionTypes, TalkState } from './types';\r\nimport { Reducer } from 'redux'\r\n\r\nexport const initialState: TalkState = {\r\n    loading: false,\r\n    fail: false,\r\n    completed: false,\r\n    data: undefined\r\n};\r\n\r\nconst reducer: Reducer<TalkState> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TalkActionTypes.LoadSuccess:\r\n            return { ...state, data: action.payload, loading: false, fail: false, completed: true }\r\n        case TalkActionTypes.LoadFailure:\r\n            return { ...state, data: action.payload, loading: false, fail: true, completed: false }\r\n        case TalkActionTypes.LoadRequest:\r\n            return { ...state, data: action.payload, loading: true, fail: false, completed: false }\r\n        case TalkActionTypes.SetTalk:\r\n            return { ...state, data: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { Action } from 'redux';\r\n\r\nexport interface Person {\r\n    id: number;\r\n    name: string;\r\n    avatar?: string;\r\n    ehSent?: boolean;\r\n}\r\n\r\nexport interface Invitation {\r\n    id: number;\r\n    userSentId: number;\r\n    person: Person;\r\n}\r\n\r\nexport interface InviteDispatchAction extends Action<InviteActionTypes> {\r\n    payload?: Person[];\r\n    search?: string;\r\n    invitation?: Invitation[];\r\n}\r\n\r\nexport enum InviteActionTypes {\r\n    LoadSuccess = 'LOAD_SUCCESS_INVITE',\r\n    LoadSuccessInvites = 'LOAD_SUCCESS_INVITES',\r\n    LoadFailure = 'LOAD_FAILURE_INVITE',\r\n    LoadRequest = 'LOAD_REQUEST_INVITE',\r\n    SetPersons = 'SET_PERSON_INVITES',\r\n    SetInvitation = 'SET_INVITES'\r\n}\r\n\r\nexport interface InviteState {\r\n    readonly loading: boolean;\r\n    readonly fail: boolean;\r\n    readonly data?: Person[];\r\n    readonly invites?: Invitation[];\r\n}","import { InviteActionTypes, InviteState } from './types';\r\nimport { Reducer } from 'redux'\r\n\r\nexport const initialState: InviteState = {\r\n    loading: false,\r\n    fail: false,\r\n    data: undefined,\r\n    invites: undefined\r\n};\r\n\r\nconst reducer: Reducer<InviteState> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case InviteActionTypes.LoadSuccess:\r\n            return { ...state, data: action.payload, loading: false, fail: false }\r\n        case InviteActionTypes.LoadFailure:\r\n            return { ...state, data: undefined, loading: false, fail: true }\r\n        case InviteActionTypes.LoadRequest:\r\n            return { ...state, data: undefined, loading: true, fail: false }\r\n        case InviteActionTypes.SetPersons:\r\n            return { ...state, data: action.payload, loading: false, fail: false }\r\n        case InviteActionTypes.LoadSuccessInvites:\r\n            return { ...state, invites: action.payload, loading: false, fail: false }\r\n        case InviteActionTypes.SetInvitation:\r\n            return { ...state, invites: action.invitation, loading: false, fail: false }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { Action } from 'redux';\r\nimport { Talk } from './../Talk/types';\r\n\r\nexport interface SelectedTalkDispatchAction extends Action<SelectedTalkActionTypes> {\r\n    payload?: Talk;\r\n}\r\n\r\nexport enum SelectedTalkActionTypes {\r\n    SetSelectTalk = 'SET_SELECTED_TALK',\r\n}\r\n\r\nexport interface SelectedTalkState {\r\n    readonly data?: Talk;\r\n}","import { SelectedTalkActionTypes, SelectedTalkState } from './types';\r\nimport { Reducer } from 'redux'\r\n\r\nexport const initialState: SelectedTalkState = {\r\n    data: undefined\r\n};\r\n\r\nconst reducer: Reducer<SelectedTalkState> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SelectedTalkActionTypes.SetSelectTalk:\r\n            return { ...state, data: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { combineReducers } from 'redux';\r\nimport user from './User/reducer';\r\nimport friend from './Friend/reducer';\r\nimport talk from './Talk/reducer';\r\nimport invite from './Invite/reducer';\r\nimport selectedTalk from './SelectedTalk/reducer';\r\nimport { UserState } from './User/types';\r\nimport { FriendState } from './Friend/types';\r\nimport { TalkState } from './Talk/types';\r\nimport { InviteState } from './Invite/types';\r\nimport { SelectedTalkState } from './SelectedTalk/types';\r\n\r\nexport interface ApplicationState {\r\n    user: UserState;\r\n    friend: FriendState;\r\n    talk: TalkState;\r\n    invite: InviteState;\r\n    selectedTalk: SelectedTalkState;\r\n}\r\n\r\nexport default combineReducers({\r\n    user,\r\n    friend,\r\n    talk,\r\n    invite,\r\n    selectedTalk\r\n});","export const TOKEN_KEY = 'GA_CHAT_WEB:JWT_TOKEN:AUTH';\r\nexport const EXPIRATION_TOKEN = 'GA_CHAT_WEB_JWT_TOKEN:EXPIRATION'\r\nexport const AUTH = 'GA_CHAT_WEB:AUTHORIZATION:AUTH';\r\n\r\nexport const isAuthenticated = (): boolean => {\r\n    let authenticated: boolean = false;\r\n    const token: string | null = localStorage.getItem(TOKEN_KEY);\r\n\r\n    if (token !== null) {\r\n        try {\r\n            const expiration: string | null = localStorage.getItem(EXPIRATION_TOKEN);\r\n\r\n            if (expiration) {\r\n                const dateExpiration: number = Date.parse(expiration);\r\n                const dateNow: number = Date.parse(new Date().toString());\r\n\r\n                if (dateExpiration > dateNow) authenticated = true;\r\n                else logout();\r\n            }\r\n        } catch {}\r\n    }\r\n\r\n    return authenticated;\r\n}\r\n\r\nexport const getToken = () => localStorage.getItem(TOKEN_KEY);\r\n\r\nexport const login = (token: string, expiration: string) => {\r\n    localStorage.setItem(TOKEN_KEY, token);\r\n    localStorage.setItem(EXPIRATION_TOKEN, expiration);\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n}\r\n\r\nexport interface Auth {\r\n    login: string;\r\n    password: string;\r\n}\r\n\r\nexport const  setAuth = (auth: Auth) => {\r\n    const authJson: string = JSON.stringify(auth);\r\n    localStorage.setItem(AUTH, authJson);\r\n}\r\n\r\nexport const getAuth = (): Auth | null => {\r\n    const authJson: any = localStorage.getItem(AUTH) as string;\r\n\r\n    if (authJson !== null && authJson.trim() !== '') {\r\n        const auth: Auth = JSON.parse(authJson);\r\n        return auth;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport const removeAuth = () => {\r\n    localStorage.removeItem(AUTH);\r\n}","import axios, { AxiosRequestConfig } from 'axios';\r\nimport { getToken } from './auth';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://www.gadev.com.br/chat_api/'\r\n});\r\n\r\napi.interceptors.request.use(async (config: AxiosRequestConfig) => {\r\n\r\n    const token: any = getToken();\r\n\r\n    if (token){\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    return config;\r\n});\r\n\r\nexport default api;","import { call, put } from 'redux-saga/effects';\r\nimport api from './../../services/api';\r\nimport { AnyAction } from 'redux'\r\nimport { login as loginApp } from './../../services/auth';\r\nimport { User, UserActionTypes } from './types';\r\nimport { Talk, TalkActionTypes } from './../Talk/types';\r\nimport { Friend, FriendActionTypes } from './../Friend/types';\r\nimport { Invitation, Person, InviteActionTypes } from './../Invite/types';\r\n\r\nexport function * login(action: AnyAction) {\r\n    try {\r\n        const user: User = action.payload;\r\n        \r\n        let response = yield call(api.post, '/account/login', {\r\n            Email: user.email,\r\n            Password: user.password\r\n        });\r\n\r\n        loginApp(response.data.accessToken, response.data.expiration);\r\n\r\n        yield init();\r\n    } catch {\r\n        yield put({ type: UserActionTypes.LoadFailure });\r\n    }\r\n}\r\n\r\nexport function * register(action: AnyAction) {\r\n    try {\r\n        const user: User = action.payload;\r\n\r\n        let response = yield call(api.post, '/account/register', {\r\n            Email: user.email,\r\n            Password: user.password,\r\n            Name: user.name,\r\n            Avatar: user.avatar\r\n        });\r\n\r\n        loginApp(response.data.accessToken, response.data.expiration);\r\n\r\n        yield init();\r\n    } catch (error){\r\n        if (error.response.status === 403) yield put ({ type: UserActionTypes.RegisterFailure});\r\n        else yield put({ type: UserActionTypes.LoadFailure });\r\n    }\r\n}\r\n\r\nexport function * load() {    \r\n    try {\r\n        yield init();\r\n    } catch {\r\n        yield put({ type: UserActionTypes.LoadFailure });\r\n    }\r\n}\r\n\r\n\r\nfunction * init(){\r\n    let response = yield call(api.get, '/account');\r\n\r\n    const user: User = {\r\n        id: response.data.id,\r\n        email: response.data.email,\r\n        name: response.data.name,\r\n        avatar: response.data.avatar ? `data:image/png;base64,${response.data.avatar}` : undefined\r\n    };\r\n\r\n    response = yield call(api.get, 'app/init');\r\n\r\n    const friends: Friend[] = [];\r\n    const talks: Talk[] = [];\r\n    const invitations: Invitation[] = [];\r\n\r\n    response.data.friends.forEach((item: Friend) => {\r\n        item.avatar = item.avatar ? `data:image/png;base64,${item.avatar}` : undefined;\r\n        friends.push(item);\r\n    });\r\n\r\n    response.data.chats.forEach((item: Talk) => {\r\n        talks.push(item);\r\n    });\r\n\r\n    response.data.invitations.forEach((invite: Invitation) => {\r\n        response.data.usersInvitations.forEach((person: Person) => {\r\n            if (invite.userSentId === person.id) {\r\n                person.avatar = person.avatar ? `data:image/png;base64,${person.avatar}` : undefined;\r\n                \r\n                invitations.push({\r\n                    id: invite.id,\r\n                    userSentId: invite.userSentId,\r\n                    person: person                    \r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    yield put({ type: FriendActionTypes.LoadSuccess, payload: friends });\r\n    yield put({ type: TalkActionTypes.LoadSuccess, payload: talks });\r\n    yield put({ type: UserActionTypes.LoadSuccess, payload: user });\r\n    yield put({ type: InviteActionTypes.LoadSuccessInvites, payload: invitations });\r\n}","import { call, put } from 'redux-saga/effects';\r\nimport api from './../../services/api';\r\nimport { AnyAction } from 'redux'\r\nimport { InviteActionTypes, Person } from './types';\r\nimport { User } from './../User/types';\r\n\r\nexport function * getPersons(action: AnyAction) {\r\n    try {\r\n        const persons: Person[] = [];\r\n        const response = yield call(api.get, `app/user/${action.search}`);        \r\n\r\n        response.data.forEach((user: User) => {\r\n            persons.push({\r\n                id: user.id as number,\r\n                name: user.name as string,\r\n                avatar: user.avatar,\r\n                ehSent: false\r\n            });\r\n        });\r\n\r\n        yield put({ type: InviteActionTypes.LoadSuccess, payload: persons });\r\n    } catch {\r\n        yield put({ type: InviteActionTypes.LoadFailure });\r\n    }\r\n}","import { all, takeLatest } from 'redux-saga/effects';\r\nimport { UserActionTypes } from './User/types';\r\nimport { InviteActionTypes } from './Invite/types';\r\nimport { login, load, register } from './User/sagas';\r\nimport { getPersons } from './Invite/sagas';\r\n\r\nexport default function * rootSaga() {\r\n    return yield all([\r\n        takeLatest(UserActionTypes.LoginRequest, login),\r\n        takeLatest(UserActionTypes.LoadRequest, load),\r\n        takeLatest(UserActionTypes.RegisterRequest, register),\r\n        takeLatest(InviteActionTypes.LoadRequest, getPersons)\r\n    ]);\r\n}","import { createStore, Store, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer, { ApplicationState } from './rootReducer';\r\nimport rootSaga from './rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store: Store<ApplicationState> = createStore(rootReducer, applyMiddleware(sagaMiddleware));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { isAuthenticated } from './../services/auth';\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            isAuthenticated() ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to={{ pathname: \"/chat\", state: { from: props.location } }} />\r\n            )\r\n        }\r\n    />\r\n);\r\n\r\n\r\nexport default PrivateRoute;","import * as signalR from '@aspnet/signalr';\r\nimport { getToken } from './auth';\r\n\r\nclass SignalR {\r\n    static connection = new signalR.HubConnectionBuilder().withUrl('http://www.gadev.com.br/chat_api/chat', { accessTokenFactory: () => getToken() as string}).build();\r\n\r\n    static Start() {\r\n        this.connection\r\n            .start();\r\n    }\r\n\r\n    static Stop() {\r\n        this.connection.stop();\r\n    }\r\n}\r\n\r\nexport default SignalR;","import { User, UserDispatchAction, UserActionTypes } from './types';\r\nimport { Dispatch } from 'redux';\r\n\r\nexport class UserDispatcher {\r\n    private readonly dispatch: Dispatch<UserDispatchAction>;\r\n\r\n    constructor(dispatch: Dispatch<UserDispatchAction>) {\r\n        this.dispatch = dispatch;        \r\n    }\r\n\r\n    loadRequest = () => this.dispatch({ type: UserActionTypes.LoadRequest, payload: undefined });\r\n\r\n    loginRequest = (user: User) => this.dispatch({ type: UserActionTypes.LoginRequest, payload: user });\r\n\r\n    registerRequest = (user: User) => this.dispatch({ type: UserActionTypes.RegisterRequest, payload: user });\r\n\r\n    resetState = () => this.dispatch({ type: UserActionTypes.ResetState });\r\n}","import { Talk, TalkDispatchAction, TalkActionTypes } from './types';\r\nimport { Dispatch } from 'redux';\r\n\r\nexport class TalkDispatcher {\r\n    private readonly dispatch: Dispatch<TalkDispatchAction>;\r\n\r\n    constructor(dispatch: Dispatch<TalkDispatchAction>) {\r\n        this.dispatch = dispatch;        \r\n    }\r\n\r\n    setTalk = (talks: Talk[]) => this.dispatch({ type: TalkActionTypes.SetTalk, payload: talks });\r\n}","import { InviteDispatchAction, InviteActionTypes, Person, Invitation } from './types';\r\nimport { Dispatch } from 'redux';\r\n\r\nexport class InviteDispatcher {\r\n    private readonly dispatch: Dispatch<InviteDispatchAction>;\r\n\r\n    constructor(dispatch: Dispatch<InviteDispatchAction>) {\r\n        this.dispatch = dispatch;        \r\n    }\r\n\r\n    loadRequest = (search: string) => this.dispatch({ type: InviteActionTypes.LoadRequest, search: search });\r\n\r\n    setPersons = (persons: Person[]) => this.dispatch({ type: InviteActionTypes.SetPersons, payload: persons });\r\n\r\n    setInvites = (invites: Invitation[]) => this.dispatch({ type:InviteActionTypes.SetInvitation, invitation: invites });\r\n}","import { Friend, FriendDispatchAction, FriendActionTypes } from './types';\r\nimport { Dispatch } from 'redux';\r\n\r\nexport class FriendDispatcher {\r\n    private readonly dispatch: Dispatch<FriendDispatchAction>;\r\n\r\n    constructor(dispatch: Dispatch<FriendDispatchAction>) {\r\n        this.dispatch = dispatch;        \r\n    }\r\n\r\n    loadRequest = () => this.dispatch({ type: FriendActionTypes.LoadRequest, payload: undefined });\r\n    \r\n    setFriends = (friends: Friend[]) => this.dispatch({ type: FriendActionTypes.LoadSuccess, payload: friends });\r\n}","import { SelectedTalkDispatchAction, SelectedTalkActionTypes } from './types';\r\nimport { Talk } from './../Talk/types';\r\nimport { Dispatch } from 'redux';\r\n\r\nexport class SelectedTalkDispatcher {\r\n    private readonly dispatch: Dispatch<SelectedTalkDispatchAction>;\r\n\r\n    constructor(dispatch: Dispatch<SelectedTalkDispatchAction>) {\r\n        this.dispatch = dispatch;        \r\n    }\r\n    \r\n    setTalk = (selectedTalk: Talk) => this.dispatch({ type: SelectedTalkActionTypes.SetSelectTalk, payload: selectedTalk });\r\n}","import styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst ContentTalk = styled.div `\r\n    width: 100%;\r\n    height: 70px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    border-bottom: 0.5px solid rgba(200,200,200,.4);\r\n    cursor:pointer;\r\n    &:hover {\r\n        background-color: rgba(230,230,230);\r\n    }\r\n`;\r\n\r\nconst ContentUserInfo = styled.div `\r\n    width: 86%;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst ContentUserImg = styled.div `\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 50px;\r\n    width: 50px;\r\n    border: 0.5px solid rgb(190,190,190);\r\n    border-radius: 50px;\r\n    margin-left: 15px;\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon) `\r\n    color: rgb(160,160,170);\r\n    font-size: 18px;\r\n`;\r\n\r\nconst ContentInfos = styled.div `\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    margin-left: 15px;\r\n    width: calc(100% - 85px);\r\n`;\r\n\r\nconst TextName = styled.p `\r\n    display: block;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    margin: 0;\r\n    padding: 0;    \r\n`;\r\n\r\nconst TextLastMessage = styled(TextName) `\r\n    font-size: 13px;\r\n    margin-top: 5px;\r\n`;\r\n\r\nconst IconMyMessage = styled(FontAwesomeIcon) `\r\n    color: rgb(150,170,225);\r\n    margin-right: 5px;\r\n`;\r\n\r\nconst ContentPendMessage = styled.div `\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: dodgerblue;\r\n    margin-right: 7%;\r\n    width: 20px;\r\n    height: 20px;\r\n    border-radius: 20px;\r\n    font-size: 13px;\r\n    color: white;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport { ContentTalk, ContentUserInfo, ContentUserImg, Icon, TextName, ContentInfos, TextLastMessage, IconMyMessage, ContentPendMessage };","import styled, { keyframes } from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst BackArrow = styled(FontAwesomeIcon) `\r\n    display: block;\r\n    padding: 10px;\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n    border-radius: 50px;\r\n    margin-right: 15px;\r\n    cursor:pointer;\r\n    &:hover {\r\n        background-color: rgba(255,255,255,.4);\r\n    }\r\n`;\r\n\r\nconst ContentIcon = styled.div `\r\n    width: 45px;\r\n    height: 45px;\r\n    border: 1px solid rgba(255,255,255,.8);\r\n    border-radius: 45px;\r\n    margin-left: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nconst IconPerson = styled(FontAwesomeIcon) `\r\n    color: white;\r\n    font-size: 22px;\r\n`;\r\n\r\nconst Img = styled.img `\r\n    height: 100%;\r\n    width: 100%;\r\n    border-radius: 100px;\r\n`;\r\n\r\nconst HoverImg = styled(Img) `\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst Header = styled.div `\r\n    background-color: rgb(80,140,190);\r\n    height: 60px;\r\n    color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    padding-left: 10px;\r\n    font-size: 22px;\r\n`;\r\n\r\nconst ContentPerson = styled.div `\r\n    height: 55px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n    border-bottom: 1px solid rgba(200,200,220,.9);\r\n`;\r\n\r\nconst ContentFriend = styled(ContentPerson) `\r\n    &:hover {\r\n        background-color: rgb(230,230,230);\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst Icon = styled(FontAwesomeIcon) `\r\n    color: white;\r\n`;\r\n\r\nconst LoginHeader = styled.div `\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst Row = styled.div `\r\n    width: 128px;\r\n    height: 1px;\r\n    background-color: white;\r\n    margin-top: -30px;\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nconst LoginButton = styled.input `\r\n    display: block;\r\n    border: 1px solid white;\r\n    color: white;\r\n    font-weight: bold;\r\n    margin: auto;\r\n    margin-top: 25px;\r\n    text-align: center;\r\n    width: 85%;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    border-radius: 5px;\r\n    font-size: 14px;\r\n    cursor: pointer;\r\n    background-color: rgba(255,255,255,0.15);\r\n    &:hover {\r\n        background-color: rgba(255,255,255,0.5);\r\n    }\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nconst ActionButton = styled.a `\r\n    display: block;\r\n    border: 1px solid white;\r\n    color: white;\r\n    font-weight: bold;\r\n    margin: auto;\r\n    margin-top: 10px;\r\n    text-align: center;\r\n    width: 85%;\r\n    padding-top: 10px;\r\n    padding-bottom: 10px;\r\n    border-radius: 5px;\r\n    font-size: 14px;\r\n    cursor: pointer;\r\n    background-color: rgba(255,255,255,0.15);\r\n    &:hover {\r\n        background-color: rgba(255,255,255,0.5);\r\n    }\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nconst InputIconContent = styled.div `\r\n    width: 18%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n`;\r\n\r\nconst IconAnimation = keyframes `\r\n    0% { transform: rotate(20deg) }\r\n    20% { transform: rotate(-20deg) }\r\n    40% { transform: rotate(20deg) }\r\n    60% { transform: rotate(-20deg) }\r\n    80% { transform: rotate(20deg) }\r\n    100% { transform: rotate(0deg) }\r\n`;\r\n\r\nconst IconError = styled(FontAwesomeIcon) `\r\n    color: rgb(255,80,60);\r\n    animation: ${IconAnimation} 1s;\r\n`;\r\n\r\nconst LoginTopIcon = styled(FontAwesomeIcon) `\r\n    color: rgba(255,255,255,0.9);\r\n    font-size: 40px;\r\n`;\r\n\r\nconst LoginContentInput = styled.div `\r\n    width: 85%;\r\n    display: flex;\r\n    border: 1px solid white;\r\n    border-radius: 5px;\r\n    margin: auto;\r\n    margin-top: 15px;\r\n`;\r\n\r\nconst LoginInput = styled.input `\r\n    width: 82%;\r\n    border: none;\r\n    font-size: 15px;\r\n    padding-left: 8px;\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nconst ContentErrorMessage = styled.div `\r\n    padding:0;\r\n    margin:0;\r\n    width: 85%;\r\n    margin-left: 7.5%;\r\n    color: #FFBC40;\r\n    font-size: 14px;\r\n`;\r\n\r\nexport { \r\n    BackArrow,\r\n    ContentIcon,\r\n    IconPerson,\r\n    Img,\r\n    Header,\r\n    ContentPerson,\r\n    ContentFriend,\r\n    Icon,\r\n    LoginHeader,\r\n    Row,\r\n    LoginButton,\r\n    ActionButton,\r\n    InputIconContent,\r\n    IconError,\r\n    LoginTopIcon,\r\n    LoginContentInput,\r\n    LoginInput,\r\n    HoverImg,\r\n    ContentErrorMessage\r\n};","import React from 'react';\r\nimport { faUser, faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport * as styled from './styles';\r\nimport * as commonStyled from './../../../commonStyles/styles';\r\n\r\nexport interface StateProps {\r\n    id: number;\r\n    name: string;\r\n    lastMessage?: string;\r\n    avatar?: string;\r\n    checkOwner(userId: number):boolean;\r\n    handleSetTalk(userId: number):void;\r\n    checkPending(userId: number):number;\r\n}\r\n\r\nconst Talk = (props: StateProps) => {\r\n\r\n    const pendingMessages = props.checkPending(props.id);\r\n    \r\n    return (\r\n        <styled.ContentTalk onClick={() => { props.handleSetTalk(props.id) }}>\r\n            <styled.ContentUserInfo>\r\n                <styled.ContentUserImg>\r\n                    {\r\n                        props.avatar ? <commonStyled.Img src={props.avatar} /> : <styled.Icon icon={faUser} />\r\n                    }\r\n                </styled.ContentUserImg>\r\n                <styled.ContentInfos>\r\n                    <styled.TextName>\r\n                        { props.name }\r\n                    </styled.TextName>\r\n                    <styled.TextLastMessage>\r\n                        {\r\n                            props.checkOwner(props.id) ? <styled.IconMyMessage icon={faCheck} /> : null\r\n                        }\r\n                        {\r\n                            props.lastMessage ? props.lastMessage : null\r\n                        }\r\n                    </styled.TextLastMessage>\r\n                </styled.ContentInfos>\r\n            </styled.ContentUserInfo>\r\n            {\r\n                pendingMessages > 0 ? <styled.ContentPendMessage>{ pendingMessages <= 9 ? pendingMessages : '9+' }</styled.ContentPendMessage> : null\r\n            }\r\n        </styled.ContentTalk>\r\n    );\r\n}\r\n\r\nexport default Talk;","import styled from 'styled-components';\r\n\r\nconst CommonContent = styled.div `\r\n    max-width: 65%;\r\n    word-break: break-all;\r\n    box-shadow: 1px 2px 3px rgb(100,100,120);\r\n    padding: 8px;\r\n    padding-left: 12px;\r\n    padding-right: 10px;\r\n    margin-top: 12px;\r\n`;\r\n\r\nconst ContentLeftMessage = styled(CommonContent) `\r\n    background-color: rgb(240,240,255);\r\n    float: left;\r\n    margin-left: 20px;\r\n    border-radius: 0px 10px 10px 10px;\r\n`;\r\n\r\nconst ContentRightMessage = styled(CommonContent) `\r\n    background-color: rgb(135,206,255);\r\n    float: right;\r\n    margin-right: 20px;\r\n    border-radius: 10px 0px 10px 10px;\r\n`;\r\n\r\nexport { ContentLeftMessage, ContentRightMessage };","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\nexport interface StateProps {\r\n    sent: boolean;\r\n    text: string;\r\n}\r\n\r\nconst Message = (props: StateProps) => {\r\n    return (\r\n        <div>\r\n            {\r\n                props.sent ? <styled.ContentRightMessage>{ props.text }</styled.ContentRightMessage> : <styled.ContentLeftMessage>{ props.text }</styled.ContentLeftMessage>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import styled from 'styled-components';\r\n\r\nconst ContentSendBar = styled.div `\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    background-color: rgba(186,206,232);\r\n`;\r\n\r\nconst InputMsg = styled.input `\r\n    font-family: 'Quicksand';\r\n    width: 85%;\r\n    font-size: 16px;\r\n    padding: 7px;\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n    border-radius: 30px;\r\n    border: none;\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nconst SendBtn = styled.a `\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: rgb(30,144,225);\r\n    width: 50px;\r\n    height: 50px;\r\n    border-radius: 50px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background-color: rgba(30,144,255,0.6);\r\n    }\r\n`;\r\n\r\nexport { ContentSendBar, InputMsg, SendBtn };","import React, { useState } from 'react';\r\nimport { AnyAction, Dispatch } from 'redux';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\nimport { format } from 'date-fns';\r\nimport signalR from './../../../services/signalr';\r\nimport { TalkState, Talk } from './../../../store/Talk/types';\r\nimport { UserState } from './../../../store/User/types';\r\nimport { TalkDispatcher } from './../../../store/Talk/actions';\r\nimport { Message } from './../../../store/Message/types';\r\nimport { ApplicationState } from './../../../store/rootReducer';\r\nimport { SelectedTalkState } from '../../../store/SelectedTalk/types';\r\nimport * as styled from './styles';\r\nimport * as commonStyled from './../../../commonStyles/styles';\r\n\r\nexport interface StateProps {\r\n    selectedTalk: SelectedTalkState;\r\n}\r\n\r\nconst SendBar = (props: StateProps) => {\r\n\r\n    const [text, setText] = useState<string>('');\r\n    const userState: UserState = useSelector<ApplicationState, UserState>((state: ApplicationState) => state.user);\r\n    const talksState: TalkState = useSelector<ApplicationState, TalkState>((state: ApplicationState) => state.talk);\r\n    const dispatch: Dispatch = useDispatch();\r\n    const talkDispatcher = new TalkDispatcher(dispatch);\r\n\r\n    const handleChangeText = (event: React.FormEvent<HTMLInputElement>) => {\r\n        setText(event.currentTarget.value);\r\n    }\r\n\r\n    const handleOnKeyDown = (event: React.KeyboardEvent) => {\r\n        if (event.keyCode === 13) {\r\n            handleSendMessage();\r\n        }\r\n    }\r\n\r\n    const handleSendMessage = () => {\r\n        if (text === null || text.trim() === '') {\r\n            return;\r\n        }\r\n\r\n        const message: Message = {\r\n            ehSent: true,\r\n            id: 0,\r\n            pending: true,\r\n            text: text,\r\n            sendDate: new Date()\r\n        };\r\n\r\n        props.selectedTalk.data?.messages.push(message);\r\n\r\n        talkDispatcher.setTalk(talksState.data as Talk[]);\r\n        \r\n        signalR.connection.invoke('SendMessage', {\r\n            UserSentId: userState.data?.id,\r\n            ConversationId: props.selectedTalk.data?.conversationId,\r\n            Text: text,\r\n            Pending: true,\r\n            SendDate: format(Date.now(), 'yyyy-MM-dd hh:mm:ss').replace(' ', 'T'),\r\n        }, props.selectedTalk.data?.friendId);\r\n\r\n        setText('');\r\n    }\r\n\r\n    return (\r\n        <styled.ContentSendBar>\r\n            <styled.InputMsg value={text} onChange={handleChangeText} onKeyDown={handleOnKeyDown} />\r\n            <styled.SendBtn onClick={handleSendMessage}>\r\n                <commonStyled.Icon icon={faPaperPlane} />\r\n            </styled.SendBtn>\r\n        </styled.ContentSendBar>\r\n    );\r\n}\r\n\r\nexport default SendBar;","import styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst ContentInviteFriend = styled.div `\r\n    border-bottom: 1px solid rgba(180,180,180,.9);\r\n    padding-top: 15px;\r\n    padding-bottom: 15px;\r\n    padding-left: 20px;\r\n    font-size: 18px;\r\n    color: rgba(0,0,0,0.7);\r\n`;\r\n\r\nconst ContentUserInfo = styled.div `\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst ContentAvatar = styled.div `\r\n    height: 40px;\r\n    width: 40px;\r\n    border: 1px solid rgba(180,180,180,.9);\r\n    border-radius: 40px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-right: 15px;\r\n`;\r\n\r\nconst IconPerson = styled(FontAwesomeIcon) `\r\n    font-size: 25px;\r\n    color: rgba(0,0,0,.5);\r\n`;\r\n\r\nconst TextName = styled.p `\r\n    display: block;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n`;\r\n\r\nconst AddButton = styled.a `\r\n    width: 15%;\r\n    height: 35px;\r\n    background-color: blue;\r\n    color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 5px;\r\n    font-size: 14px;\r\n    cursor: pointer;\r\n    background-color: rgba(0,0,255,.65);\r\n    &:hover {\r\n        background-color: rgba(0,0,255,.85);\r\n    }\r\n`;\r\n\r\nconst ContentInput = styled.div `\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    margin-top: 10px;\r\n`;\r\n\r\nconst Input = styled.input `\r\n    font-family: 'Quicksand';\r\n    width: 75%;\r\n    font-size: 14px;\r\n    padding: 7px;\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n    border-radius: 30px;\r\n    border: none;\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nconst SearchBtn = styled.a `\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: #1E90FF;\r\n    width: 37px;\r\n    height: 37px;\r\n    border-radius: 37px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background-color: rgba(30,144,255,0.6);\r\n    }\r\n`;\r\n\r\n\r\nconst ContentPersons = styled.div `\r\n    margin-top: 15px;\r\n    border-top: 1px solid rgba(200,200,220,.9);\r\n`;\r\n\r\nconst Text = styled.div `\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 20px;\r\n    color: rgb(110,110,110);\r\n    margin-top: 15px;\r\n`;\r\n\r\nconst ContentLoader = styled.div `\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: 15px;\r\n`;\r\n\r\nexport { ContentInviteFriend, ContentAvatar, IconPerson, TextName, AddButton, ContentUserInfo, ContentInput, Input, SearchBtn, ContentPersons, Text, ContentLoader };\r\n","import React, { useState } from 'react';\r\nimport { faArrowLeft, faUser, faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { Dispatch } from 'redux';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from 'react-loader-spinner';\r\nimport { format } from 'date-fns';\r\nimport { ApplicationState } from './../../../store/rootReducer';\r\nimport { InviteDispatcher } from './../../../store/Invite/actions';\r\nimport { InviteState, Person } from './../../../store/Invite/types';\r\nimport { UserState } from './../../../store/User/types';\r\nimport signalR from './../../../services/signalr';\r\nimport * as styled from './styles';\r\nimport * as commonStyled from './../../../commonStyles/styles';\r\n\r\ninterface StateProps {\r\n    toggleMenu(): void;\r\n}\r\n\r\nconst Invite = (props: StateProps) => {\r\n    const [text, setText] = useState<string>('');\r\n    const inviteState: InviteState = useSelector<ApplicationState, InviteState>((state: ApplicationState) => state.invite);\r\n    const userState: UserState = useSelector<ApplicationState, UserState>((state: ApplicationState) => state.user);\r\n    const dispatch: Dispatch = useDispatch();\r\n    const inviteDispatcher = new InviteDispatcher(dispatch);\r\n    \r\n    const changeSearchText = (event: React.FormEvent<HTMLInputElement>) => {\r\n        setText(event.currentTarget.value);\r\n    }\r\n\r\n    const handleSearch = () => {\r\n        if (text.trim() === null || text.trim() === '') return;\r\n\r\n        inviteDispatcher.loadRequest(text);\r\n    }\r\n\r\n    const handleSendInvite = (userId: number) => {\r\n        signalR.connection.invoke('SendInvite', {\r\n            Refused: false,\r\n            UserReceivedId: userId,\r\n            UserSentId: userState.data?.id,\r\n            RequestDate: format(Date.now(), 'yyyy-MM-dd hh:mm:ss').replace(' ', 'T')\r\n        });\r\n\r\n        const persons = inviteState.data?.map((person: Person) => {\r\n            if (person.id === userId) person.ehSent = true;\r\n            return person;\r\n        });\r\n\r\n        inviteDispatcher.setPersons(persons as Person[]);\r\n    }\r\n\r\n    const friendContent = (person: Person) => (\r\n        <commonStyled.ContentPerson key={person.id}>\r\n            <styled.ContentUserInfo>\r\n                <styled.ContentAvatar>\r\n                    {\r\n                        person.avatar ? <commonStyled.Img src={person.avatar}/> : <styled.IconPerson icon={faUser}/>\r\n                    }\r\n                </styled.ContentAvatar>\r\n            <styled.TextName>\r\n                { person.name }\r\n            </styled.TextName>\r\n            </styled.ContentUserInfo>\r\n            {\r\n                !person.ehSent ? <styled.AddButton onClick={() => { handleSendInvite(person.id); }}>Add</styled.AddButton> : null\r\n            }\r\n        </commonStyled.ContentPerson>\r\n    );\r\n\r\n    const loading = () => (\r\n        <styled.ContentLoader>\r\n            <Loader type=\"Oval\" color=\"blue\" height={30}/>\r\n        </styled.ContentLoader>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <commonStyled.Header>\r\n                <commonStyled.BackArrow icon={faArrowLeft} onClick={props.toggleMenu} />\r\n                Adicionar amigo\r\n            </commonStyled.Header>\r\n            <styled.ContentInput>\r\n                <styled.Input type=\"text\" placeholder=\"Nome ou e-mail\" value={text} onChange={changeSearchText} />\r\n                <styled.SearchBtn onClick={handleSearch}>\r\n                    <commonStyled.Icon icon={faSearch} />\r\n                </styled.SearchBtn>\r\n            </styled.ContentInput>\r\n            <styled.ContentPersons>\r\n                {\r\n                    !inviteState.data && !inviteState.loading ?\r\n                    <styled.Text>Nenhum resultado</styled.Text> : \r\n                    inviteState.loading ?\r\n                    loading() :\r\n                    inviteState.data?.map((person: Person) => {\r\n                        return friendContent(person)\r\n                    })\r\n                }\r\n            </styled.ContentPersons>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Invite;","import styled, { keyframes } from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport interface ConfigAnimation {\r\n    start: number;\r\n}\r\n\r\nexport interface Config {\r\n    backColor?: string;\r\n    backColorHover?: string;\r\n}\r\n\r\nconst ContentTag = styled.div `\r\n    border-bottom: 1px solid rgba(180,180,180,.9);\r\n    padding-top: 15px;\r\n    padding-bottom: 15px;\r\n    padding-left: 20px;\r\n    font-size: 18px;\r\n    color: rgba(0,0,0,0.7);\r\n`;\r\n\r\nconst ContentUserInfo = styled.div `\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst ContentAvatar = styled.div `\r\n    height: 40px;\r\n    width: 40px;\r\n    border: 1px solid rgba(180,180,180,.9);\r\n    border-radius: 40px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-right: 15px;\r\n`;\r\n\r\nconst IconPerson = styled(FontAwesomeIcon) `\r\n    font-size: 25px;\r\n    color: rgba(0,0,0,.5);\r\n`;\r\n\r\nconst TextName = styled.p `\r\n    display: block;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n`;\r\n\r\nconst InviteButton = styled.a `\r\n    width: 40%;\r\n    height: 35px;\r\n    margin-left: 5%;\r\n    background-color: blue;\r\n    color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 5px;\r\n    font-size: 14px;\r\n    cursor: pointer;\r\n    background-color: ${(props: Config) => props.backColor ? props.backColor : 'rgba(0,0,255,.65)'};\r\n    &:hover {\r\n        background-color: ${(props: Config) => props.backColorHover ? props.backColorHover : 'rgba(0,0,255,.85)'};\r\n    }\r\n`;\r\n\r\nconst ContentPlusIcon = styled.div `\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    width: 100%;\r\n`;\r\n\r\nconst OpenMenuInvite = keyframes `\r\n    0% { top: 100%; }\r\n    100% { top: 0%; }\r\n`;\r\n\r\nconst CloseMenuInvite = keyframes `\r\n    0% { top: 0%; }\r\n    100% { top: 100%; }\r\n`;\r\n\r\nconst ContentInvite = styled.div `\r\n    background-color: rgb(220,230,245);\r\n    height: 100%;\r\n    width: 100%;\r\n    position: absolute;\r\n    top: ${(props: ConfigAnimation) => props.start === 1 ? 0 : 100}%;\r\n    animation: ${(props: ConfigAnimation) => props.start === 1 ? OpenMenuInvite : (props.start === 2 ? CloseMenuInvite : null)} 0.8s;\r\n`;\r\n\r\nconst ContentInviteBtn = styled.div `\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 32%;\r\n`;\r\n\r\nexport { ContentTag, ContentAvatar, IconPerson, TextName, InviteButton, ContentUserInfo, ContentInvite, ContentPlusIcon, ContentInviteBtn };\r\n","import React, { useState } from 'react';\r\nimport { faArrowLeft, faUser, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { ApplicationState } from './../../../store/rootReducer';\r\nimport { InviteDispatcher } from './../../../store/Invite/actions';\r\nimport { FriendState, Friend } from './../../../store/Friend/types';\r\nimport { InviteState, Invitation } from './../../../store/Invite/types';\r\nimport signalR from './../../../services/signalr';\r\nimport Invite from './../Invite/index';\r\nimport * as styled from './styles';\r\nimport * as commonStyled from './../../../commonStyles/styles';\r\n\r\nenum TypeAnimation {\r\n    Default = 0,\r\n    Open = 1,\r\n    Close = 2\r\n}\r\n\r\ninterface StateProps {\r\n    toggleMenu(): void;\r\n    handleSetTalk(userId: number):void;\r\n}\r\n\r\nconst Friends = (props: StateProps) => {\r\n    const friendState: FriendState = useSelector<ApplicationState, FriendState>((state: ApplicationState) => state.friend);\r\n    const inviteState: InviteState = useSelector<ApplicationState, InviteState>((state: ApplicationState) => state.invite);\r\n    const [startAnimation, setStartAnimation] = useState<number>(TypeAnimation.Default);\r\n    const dispatch: Dispatch = useDispatch();\r\n    const invitationDispatcher = new InviteDispatcher(dispatch);\r\n\r\n    const handleToggleMenuInvite = () => {\r\n        if (startAnimation === TypeAnimation.Default || startAnimation === TypeAnimation.Close) setStartAnimation(TypeAnimation.Open);\r\n        else if (startAnimation === TypeAnimation.Open) setStartAnimation(TypeAnimation.Close);\r\n    }\r\n\r\n    const handleAceptInvite = (inviteId: number) => {\r\n        signalR.connection.invoke('AceptInvite', inviteId);\r\n        adjustInvites(inviteId);\r\n    }\r\n\r\n    const handleDeclineInvite = (inviteId: number) => {\r\n        signalR.connection.invoke('DeclineInvite', inviteId);\r\n        adjustInvites(inviteId);\r\n    }\r\n\r\n    const adjustInvites = (inviteId: number) => {\r\n        const invites = inviteState.invites?.filter((item: Invitation) => {\r\n            if (item.id !== inviteId) return item;\r\n        });\r\n\r\n        invitationDispatcher.setInvites(invites as Invitation[]);\r\n    }\r\n\r\n    const handleSelectTalk = (id: number) => {\r\n        props.handleSetTalk(id);\r\n        props.toggleMenu();\r\n    }\r\n\r\n    const personContent = (id: number, name: string, avatar: string | null = null) => (\r\n        <commonStyled.ContentFriend key={id} onClick={ () => { handleSelectTalk(id); } }>\r\n            <styled.ContentUserInfo>\r\n                <styled.ContentAvatar>\r\n                    {\r\n                        avatar ? <commonStyled.Img src={avatar}/> : <styled.IconPerson icon={faUser}/>\r\n                    }\r\n                </styled.ContentAvatar>\r\n            <styled.TextName>\r\n                { name }\r\n            </styled.TextName>\r\n            </styled.ContentUserInfo>\r\n        </commonStyled.ContentFriend>\r\n    );\r\n\r\n    const inviteContent = (id: number, name: string, avatar: string | null = null, idInvite: number) => (\r\n        <commonStyled.ContentPerson key={id}>\r\n            <styled.ContentUserInfo>\r\n                <styled.ContentAvatar>\r\n                    {\r\n                        avatar ? <commonStyled.Img src={avatar}/> : <styled.IconPerson icon={faUser}/>\r\n                    }\r\n                </styled.ContentAvatar>\r\n            <styled.TextName>\r\n                { name }\r\n            </styled.TextName>\r\n            </styled.ContentUserInfo>\r\n            {\r\n                <styled.ContentInviteBtn>\r\n                    <styled.InviteButton onClick={() => { handleDeclineInvite(idInvite as number) }} backColor=\"rgba(255,0,0,.65)\" backColorHover=\"rgba(255,0,0,.85)\" >X</styled.InviteButton>\r\n                    <styled.InviteButton onClick={() => { handleAceptInvite(idInvite as number) }} >Add</styled.InviteButton>\r\n                </styled.ContentInviteBtn>\r\n            }\r\n        </commonStyled.ContentPerson>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <styled.ContentInvite start={startAnimation}>\r\n                <Invite toggleMenu={handleToggleMenuInvite} />\r\n            </styled.ContentInvite>\r\n            <commonStyled.Header>\r\n                <commonStyled.BackArrow icon={faArrowLeft} onClick={props.toggleMenu}/>\r\n                Amigos\r\n                <styled.ContentPlusIcon>\r\n                    <commonStyled.BackArrow icon={faPlus} onClick={handleToggleMenuInvite}/>\r\n                </styled.ContentPlusIcon>\r\n            </commonStyled.Header>\r\n            {\r\n                inviteState.invites ? <styled.ContentTag>Convites</styled.ContentTag> : null\r\n            }\r\n            {\r\n                inviteState.invites?.map((item: Invitation) => (\r\n                    inviteContent(item.person.id, item.person.name, item.person.avatar, item.id)\r\n                ))\r\n            }\r\n            <styled.ContentTag>Amigos</styled.ContentTag>\r\n            {\r\n                friendState.data?.map((item: Friend) => (\r\n                    personContent(item.id, item.name, item.avatar)\r\n                ))\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Friends;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\ninterface StateProps {\r\n    openModal: boolean;\r\n    handleOpenModel(): void;\r\n    handleLogout(): void;\r\n}\r\n\r\nconst ModalLogout = (props: StateProps) => {\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={props.openModal}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={props.handleOpenModel}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-slide-title\">{\"Fazer logout?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-slide-description\">\r\n            Por favor confirme se quer sair do chat\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={props.handleLogout} color=\"primary\">\r\n            Sim\r\n          </Button>\r\n          <Button onClick={props.handleOpenModel} color=\"primary\">\r\n            Não\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModalLogout;","import styled from 'styled-components';\r\n\r\nconst ContentUserInfoBar = styled.div `\r\n    width: 74%;\r\n    display: flex;\r\n    align-items: center;\r\n    \r\n`;\r\n\r\nconst ContentRightIcon = styled.div `\r\n    width: 13%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding-top: 15px;\r\n    padding-bottom: 15px;\r\n    cursor:pointer;\r\n    border-radius: 15px;\r\n    &:hover {\r\n        background-color: rgba(255,255,255,.2);\r\n    }\r\n`;\r\n\r\nconst TextName = styled.p `\r\n    display: block;\r\n    margin-left: 10px;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n`;\r\n\r\nexport { ContentUserInfoBar, ContentRightIcon, TextName };","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSignOutAlt, faUser, faUsers } from '@fortawesome/free-solid-svg-icons';\r\nimport { useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport signalR from './../../../services/signalr';\r\nimport { ApplicationState } from './../../../store/rootReducer';\r\nimport { UserState } from './../../../store/User/types';\r\nimport { logout } from './../../../services/auth';\r\nimport ModalLogout from './../ModalLogout/index';\r\nimport * as styled from './styles';\r\nimport * as commonStyled from './../../../commonStyles/styles';\r\n\r\nexport interface StateProps {\r\n    toggleMenu(): void;\r\n    toggleImg(): void;\r\n}\r\n\r\nconst UserInfoBar = (props: StateProps) => {\r\n\r\n    const [openModal, setOpenModal] = useState<boolean>(false);\r\n    const [logoutChat, setLogoutChat] = useState<boolean>(false);\r\n    const userState: UserState = useSelector<ApplicationState, UserState>((state: ApplicationState) => state.user);\r\n\r\n    const handleModalLogout = () => {\r\n        setOpenModal(!openModal);\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        logout();\r\n        setLogoutChat(true);\r\n        signalR.Stop();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                logoutChat ? <Redirect to=\"/chat\" /> : null\r\n            }\r\n            <ModalLogout openModal={openModal} handleOpenModel={handleModalLogout} handleLogout={handleLogout} />\r\n            <styled.ContentUserInfoBar>\r\n                <commonStyled.ContentIcon>\r\n                    {\r\n                        userState.data?.avatar ? <commonStyled.HoverImg src={userState.data?.avatar} onClick={props.toggleImg} /> : <commonStyled.IconPerson icon={faUser} />\r\n                    }\r\n                </commonStyled.ContentIcon>\r\n                <styled.TextName>\r\n                    { userState.data?.name }\r\n                </styled.TextName>                            \r\n            </styled.ContentUserInfoBar>\r\n            <styled.ContentRightIcon onClick={props.toggleMenu}>\r\n                <FontAwesomeIcon icon={faUsers} />\r\n            </styled.ContentRightIcon>\r\n            <styled.ContentRightIcon onClick={handleModalLogout}>\r\n                <FontAwesomeIcon icon={faSignOutAlt} />\r\n            </styled.ContentRightIcon>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UserInfoBar;","import styled, { keyframes } from 'styled-components';\r\n\r\nexport interface Config {\r\n    size?: string;\r\n    width?: number;\r\n    color?: string;\r\n    shadow?: string;\r\n}\r\n\r\nexport interface ConfigAnimation {\r\n    start: number;\r\n}\r\n\r\nconst CommonFlex = styled.div `\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst Main = styled(CommonFlex) `\r\n    height: 100vh;\r\n    width: 100vw;\r\n    background-image: linear-gradient(135deg, #EE82EE, #FF00FF, #BA55D3, #8A2BE2, #1E90FF, #0080ff, #0040ff, #0000ff);\r\n    overflow-x: auto;    \r\n`;\r\n\r\nconst Body = styled.div `\r\n    height: 92%;\r\n    width: 1400px;\r\n    @media (max-width: 1400px) {\r\n        height: 100%;\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst Section = styled.div `\r\n    height: 100%;\r\n    float: left;\r\n    position: relative;\r\n    overflow:hidden;\r\n`;\r\n\r\nconst TalkSection = styled(Section) `\r\n    width: 30%;\r\n    background-color: rgb(245,245,250);\r\n    @media (max-width: 1020px) {\r\n        width: 40%;\r\n    }\r\n`;\r\n\r\nconst MessageSection = styled(Section) `\r\n    width: 70%;\r\n    background-color: rgb(235,235,235);\r\n    @media (max-width: 1020px) {\r\n        width: 60%;\r\n    }\r\n`;\r\n\r\nconst BarSection = styled(CommonFlex) `\r\n    background-color: rgb(70,130,180);\r\n    width: 100%;\r\n    height: 60px;\r\n    box-shadow: ${(props: Config) => props.shadow ? props.shadow : null};\r\n    color: white;\r\n    overflow-y: auto;\r\n`;\r\n\r\nconst ContentMessage = styled.div `\r\n    width: 100%;\r\n    height: calc(100% - 125px);\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow-y: auto;\r\n`;\r\n\r\nconst ContentSendBar = styled.div `\r\n    width: 100%;\r\n    height: 65px;\r\n`;\r\n\r\nconst OpenMenuFriends = keyframes `\r\n    0% { left: -100%; }\r\n    100% { left: 0%; }\r\n`;\r\n\r\nconst CloseMenuFriends = keyframes `\r\n    0% { left: 0%; }\r\n    100% { left: -100%; }\r\n`;\r\n\r\nconst FriendsMenu = styled.div `\r\n    background-color: rgb(240,240,255);\r\n    height: 100%;\r\n    width: 100%;\r\n    position: absolute;\r\n    left: ${(props: ConfigAnimation) => props.start === 1 ? 0 : 100}%;\r\n    top: 0;\r\n    animation: ${(props: ConfigAnimation) => props.start === 1 ? OpenMenuFriends : (props.start === 2 ? CloseMenuFriends : null)} 0.8s;\r\n`;\r\n\r\nconst LoadText = styled.div `\r\n    color: white;\r\n    font-size: 22px;\r\n    margin-bottom: 25px;\r\n`;\r\n\r\nconst ContentLoad = styled(CommonFlex) `\r\n    flex-direction: column;\r\n`;\r\n\r\nconst ContentNoTalk = styled(CommonFlex) `\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0,0,0,.3);\r\n    color: white;\r\n    font-size: 25px;\r\n`;\r\n\r\nconst ContentFriendBar = styled(CommonFlex) `\r\n    width: 100%;\r\n    justify-content: flex-start;\r\n    margin-left: 10px;\r\n`;\r\n\r\nconst ContentFriendBarTexts = styled(CommonFlex) `\r\n    margin-left: 10px;\r\n    align-items: flex-start;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst ContentFriendBarOnline = styled.p `\r\n    font-size: 12px;\r\n    margin: 0;\r\n    padding: 0;\r\n    margin-top: 3px;\r\n`;\r\n\r\nconst ContentViewImg = styled.div `\r\n    position: absolute;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n    width: 100%;\r\n    top:0;\r\n    left:0;\r\n    background-color: rgba(0,0,0,.3);\r\n`;\r\n\r\nconst ViewImg = styled.img `\r\n    box-shadow: 4px 4px 6px rgba(0,0,0,.6)\r\n`;\r\n\r\nexport { \r\n    Main,\r\n    Body,\r\n    Section,\r\n    BarSection,\r\n    ContentMessage,\r\n    ContentSendBar,\r\n    FriendsMenu,\r\n    LoadText,\r\n    ContentLoad,\r\n    ContentNoTalk,\r\n    ContentFriendBar,\r\n    ContentFriendBarTexts,\r\n    ContentFriendBarOnline,\r\n    TalkSection,\r\n    MessageSection,\r\n    ContentViewImg,\r\n    ViewImg\r\n};","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport Loader from 'react-loader-spinner';\r\nimport signalR from './../../services/signalr';\r\nimport { isAuthenticated, getToken } from './../../services/auth';\r\nimport { ApplicationState } from './../../store/rootReducer';\r\nimport { UserDispatcher } from './../../store/User/actions';\r\nimport { TalkDispatcher } from './../../store/Talk/actions';\r\nimport { InviteDispatcher } from './../../store/Invite/actions';\r\nimport { FriendDispatcher } from './../../store/Friend/actions';\r\nimport { SelectedTalkDispatcher } from './../../store/SelectedTalk/actions';\r\nimport { UserState } from './../../store/User/types';\r\nimport { TalkState, Talk } from './../../store/Talk/types';\r\nimport { Message } from './../../store/Message/types';\r\nimport { FriendState, Friend } from './../../store/Friend/types';\r\nimport { SelectedTalkState } from './../../store/SelectedTalk/types';\r\nimport { InviteState, Invitation, Person } from './../../store/Invite/types';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport TalkContent from './Talk/index';\r\nimport MessageContent from './Message/index';\r\nimport SendBar from './SendBar/index';\r\nimport FriendsContent from './Friends/index';\r\nimport UserInfoBar from './UserInfoBar/index';\r\nimport * as styled from './styles';\r\nimport * as commonStyled from './../../commonStyles/styles';\r\n\r\nenum TypeAnimation {\r\n    Default = 0,\r\n    Open = 1,\r\n    Close = 2\r\n}\r\n\r\ninterface ChatPerson {\r\n    id?: number;\r\n    avatar?: string;\r\n    lastMessage?: string;\r\n    name?: string;\r\n}\r\n\r\nconst Chat = () => {\r\n\r\n    const [people, setPeople] = useState<ChatPerson[]>([]);\r\n    const [startAnimation, setStartAnimation] = useState<number>(TypeAnimation.Default);\r\n    const [ehRegister, setEhRegister] = useState<boolean>(true);\r\n    const [ehModalImgFriend, setEhModalImgFriend] = useState<boolean>(false);\r\n    const [ehModalMyImg, setEhModalMyImg] = useState<boolean>(false);\r\n    const userState: UserState = useSelector<ApplicationState, UserState>((state: ApplicationState) => state.user);\r\n    const talkState: TalkState = useSelector<ApplicationState, TalkState>((state: ApplicationState) => state.talk);\r\n    const friendState: FriendState = useSelector<ApplicationState, FriendState>((state: ApplicationState) => state.friend);\r\n    const inviteState: InviteState = useSelector<ApplicationState, InviteState>((state: ApplicationState) => state.invite);\r\n    const selectedTalkState: SelectedTalkState = useSelector<ApplicationState, SelectedTalkState>((state: ApplicationState) => state.selectedTalk);\r\n    const dispatch: Dispatch = useDispatch();\r\n    const userDispatcher = new UserDispatcher(dispatch);\r\n    const talkDispatcher = new TalkDispatcher(dispatch);\r\n    const invitationDispatcher = new InviteDispatcher(dispatch);\r\n    const friendDispatcher = new FriendDispatcher(dispatch);\r\n    const selectedTalkDispatcher = new SelectedTalkDispatcher(dispatch);\r\n    const friendSelected = friendState.data?.filter((item: Friend) => item.id === selectedTalkState.data?.friendId)[0];\r\n\r\n    useEffect(() => {\r\n        const element: any = document.getElementById('ContentMessage');\r\n        \r\n        if (element) element.scrollTop = element.scrollHeight;\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (!userState.authenticated && isAuthenticated()){\r\n            userDispatcher.loadRequest();\r\n        }\r\n\r\n        signalR.Start();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let peopleList: ChatPerson[] = [];\r\n\r\n        talkState.data?.forEach((talk: Talk) => {\r\n            if (talk.messages.length > 0) {\r\n                peopleList.push({\r\n                    id: talk.friendId,\r\n                    lastMessage: talk.messages[talk.messages.length - 1].text\r\n                });\r\n            }\r\n        });\r\n\r\n        peopleList = peopleList.map((person: ChatPerson) => {\r\n            friendState.data?.forEach((friend: Friend) => {\r\n                if (person.id === friend.id){\r\n                    person.name = friend.name;\r\n                    person.avatar = friend.avatar;\r\n                }\r\n            });\r\n\r\n            return person;\r\n        });\r\n\r\n        setPeople(peopleList);\r\n\r\n        if (talkState.completed && ehRegister){\r\n            registerEventUseSelectedTalk();\r\n            registerEvents();\r\n            setEhRegister(false);\r\n        }\r\n    }, [talkState]);\r\n\r\n    useEffect(() => {\r\n        registerEventUseSelectedTalk();\r\n\r\n    }, [selectedTalkState]);\r\n\r\n    const registerEventUseSelectedTalk = () => {\r\n        signalR.connection.off('ReceivedMessage');\r\n\r\n        signalR.connection.on('ReceivedMessage', (receivedMsg: any) => {\r\n            let talks: Talk[] = talkState.data as Talk[];\r\n\r\n            const newMessage: Message = {\r\n                ehSent: false,\r\n                id: 0,\r\n                pending: selectedTalkState.data?.conversationId === receivedMsg.conversationId ? false : true,\r\n                sendDate: receivedMsg.sendDate,\r\n                text: receivedMsg.text\r\n            };\r\n\r\n            talks = talks?.map((item: Talk) => {\r\n                if (item.conversationId === receivedMsg.conversationId) item.messages.push(newMessage);\r\n\r\n                return item;\r\n            });\r\n            \r\n            talkDispatcher.setTalk(talks);\r\n        });\r\n    }\r\n\r\n    const registerEvents = () => {\r\n        signalR.connection.on('ReceivedInvite', (invitation: Invitation, person: Person) => {\r\n            const invites: Invitation[] = inviteState.invites ? inviteState.invites as Invitation[] : [];\r\n            \r\n            person.avatar = person.avatar ? `data:image/png;base64,${person.avatar}` : undefined;\r\n\r\n            invites.push({\r\n                id: invitation.id,\r\n                userSentId: invitation.userSentId,\r\n                person: person as Person\r\n            });\r\n\r\n            invitationDispatcher.setInvites(invites);\r\n        });\r\n\r\n        signalR.connection.on('NewFriend', (conversationId: string, friendUser: Friend) => {\r\n            const friends = friendState.data ? friendState.data as Friend[] : [];\r\n\r\n            friendUser.avatar = friendUser.avatar ? `data:image/png;base64,${friendUser.avatar}` : undefined;\r\n\r\n            friends.push(friendUser);\r\n            friendDispatcher.setFriends(friends);\r\n\r\n            const talks = talkState.data ? talkState.data as Talk[] : [];\r\n            talks.push({\r\n                conversationId,\r\n                messages: [],\r\n                friendId: friendUser.id\r\n            });\r\n            talkDispatcher.setTalk(talks);\r\n        });\r\n        \r\n        signalR.connection.on('UserConnected', (userId: number) => {\r\n            const friends = friendState.data?.map((friend: Friend) => {\r\n                if (friend.id === userId) friend.isOnline = true;\r\n\r\n                return friend;\r\n            });\r\n\r\n            friendDispatcher.setFriends(friends as Friend[]);\r\n        });\r\n\r\n        signalR.connection.on('UserDesconnected', (userId: number) => {\r\n            const friends = friendState.data?.map((friend: Friend) => {\r\n                if (friend.id === userId) friend.isOnline = false;\r\n\r\n                return friend;\r\n            });\r\n\r\n            friendDispatcher.setFriends(friends as Friend[]);\r\n        });\r\n    }\r\n\r\n    const handleToggleMenuFriends = () => {\r\n        if (startAnimation === TypeAnimation.Default || startAnimation === TypeAnimation.Close) setStartAnimation(TypeAnimation.Open);\r\n        else if (startAnimation === TypeAnimation.Open) setStartAnimation(TypeAnimation.Close);\r\n    }\r\n\r\n    const handleSetTalk = (personId: number) => {\r\n        let hasPending: boolean = false;\r\n\r\n        const talks = talkState.data?.map((talk: Talk) => {\r\n            talk.messages = talk.messages.map((msg: Message) => {\r\n                if (msg.pending) {\r\n                    msg.pending = false;\r\n                    hasPending = true;\r\n                }\r\n\r\n                return msg;\r\n            });\r\n\r\n            return talk;\r\n        });\r\n        \r\n        const talkSelected = talks?.filter((talk: Talk) => {\r\n            if (talk.friendId === personId) return talk;\r\n        })[0];\r\n\r\n        selectedTalkDispatcher.setTalk(talkSelected as Talk);\r\n        talkDispatcher.setTalk(talks as Talk[]);\r\n        \r\n        if (hasPending) signalR.connection.invoke('ViewMessage', talkSelected?.conversationId);\r\n    }\r\n\r\n    const checkOwnerLastMassege = (personId: number): boolean => {\r\n        const talk = talkState.data?.filter((talk: Talk) => {\r\n            if (talk.friendId === personId) return talk;\r\n        })[0];\r\n\r\n        const ehSent: boolean = talk ? talk?.messages[talk?.messages.length - 1].ehSent : false;\r\n\r\n        return ehSent;\r\n    }\r\n\r\n    const checkAmountPendMessage = (personId: number): number => {\r\n        const talk = talkState.data?.filter((talk: Talk) => {\r\n            if (talk.friendId === personId) return talk;\r\n        })[0];\r\n\r\n        const pendings: number = !talk || !talk.messages ? 0 : talk?.messages.filter((msg: Message) => {\r\n            if (msg.pending && !msg.ehSent) return msg;\r\n        }).length;\r\n\r\n        return pendings;\r\n    }\r\n\r\n    const handleToggleFriendImgModal = () => {\r\n        setEhModalImgFriend(!ehModalImgFriend);\r\n    }\r\n\r\n    const handleToggleMyImgModal = () => {\r\n        setEhModalMyImg(!ehModalMyImg);\r\n    }\r\n\r\n    const loading = () => (\r\n        <styled.ContentLoad>\r\n            <styled.LoadText>Carregando...</styled.LoadText>\r\n            <Loader type=\"Oval\" color=\"white\" height={60}/>\r\n        </styled.ContentLoad>\r\n    );\r\n    \r\n    const mainContent = () => (\r\n        <>\r\n            <styled.Body>\r\n                <styled.TalkSection>\r\n                    <styled.FriendsMenu start={startAnimation}>\r\n                        <FriendsContent toggleMenu={handleToggleMenuFriends} handleSetTalk={handleSetTalk} />\r\n                    </styled.FriendsMenu>\r\n                    <styled.BarSection>\r\n                        <UserInfoBar toggleMenu={handleToggleMenuFriends} toggleImg={handleToggleMyImgModal} />\r\n                    </styled.BarSection>\r\n                    \r\n                    {\r\n                        people.map((person: ChatPerson) => (\r\n                            <TalkContent key={person.id}  id={person.id as number} name={person.name as string} lastMessage={person.lastMessage}\r\n                                avatar={person.avatar} handleSetTalk={handleSetTalk} checkOwner={checkOwnerLastMassege} checkPending={checkAmountPendMessage} />\r\n                        ))\r\n                    }\r\n\r\n                </styled.TalkSection>\r\n                <styled.MessageSection>\r\n                    {\r\n                        !selectedTalkState.data ? <styled.ContentNoTalk>Nenhuma conversa selecionada</styled.ContentNoTalk> : null\r\n                    }\r\n                    <styled.BarSection shadow={\"1px 1px 5px rgb(150,150,150)\"}>\r\n                        {\r\n                            selectedTalkState.data ?\r\n                                <styled.ContentFriendBar>\r\n                                    <commonStyled.ContentIcon>\r\n                                        {\r\n                                            friendSelected && friendSelected.avatar ?\r\n                                            <commonStyled.HoverImg src={friendSelected.avatar} onClick={handleToggleFriendImgModal} />\r\n                                            : <commonStyled.IconPerson icon={faUser}></commonStyled.IconPerson>\r\n                                        }\r\n                                    </commonStyled.ContentIcon>\r\n                                    <styled.ContentFriendBarTexts>\r\n                                        <>\r\n                                            {\r\n                                                friendSelected?.name\r\n                                            }\r\n                                        </>\r\n                                        <div>\r\n                                            <styled.ContentFriendBarOnline>\r\n                                                {\r\n                                                    friendSelected?.isOnline ? 'Online' : 'Offline'\r\n                                                }\r\n                                            </styled.ContentFriendBarOnline>\r\n                                        </div>\r\n                                    </styled.ContentFriendBarTexts>\r\n                                </styled.ContentFriendBar>\r\n                            : null\r\n                        }\r\n                    </styled.BarSection>\r\n                    <styled.ContentMessage id=\"ContentMessage\">\r\n                        {\r\n                            selectedTalkState.data?.messages.length === 0 ? '' \r\n                            :\r\n                            selectedTalkState.data?.messages.map((message: Message, index: number) => (\r\n                                <MessageContent key={index} sent={message.ehSent} text={message.text} />\r\n                            ))\r\n                        }\r\n                        <br />\r\n                    </styled.ContentMessage>\r\n                    <styled.ContentSendBar>\r\n                        <SendBar selectedTalk={selectedTalkState} />\r\n                    </styled.ContentSendBar>\r\n                </styled.MessageSection>\r\n                {\r\n                    ehModalImgFriend ? <styled.ContentViewImg onClick={handleToggleFriendImgModal}><styled.ViewImg src={friendSelected?.avatar} alt=\"\" /></styled.ContentViewImg> : null\r\n                }\r\n                {\r\n                    ehModalMyImg ? <styled.ContentViewImg onClick={handleToggleMyImgModal}><styled.ViewImg src={userState.data?.avatar} alt=\"\" /></styled.ContentViewImg> : null\r\n                }\r\n            </styled.Body>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <styled.Main>\r\n            {\r\n                talkState.completed ? mainContent() : loading()\r\n            }\r\n        </styled.Main>\r\n    );\r\n}\r\n\r\nexport default Chat;","import styled from 'styled-components';\r\nimport { Checkbox } from 'pretty-checkbox-react';\r\n\r\nexport interface Config {\r\n    size?: number,\r\n    color?: string\r\n}\r\n\r\nconst ContentIcon = styled.div `\r\n    width: 100px;\r\n    height: 100px;\r\n    border-radius: 100px;\r\n    border: 1px solid white;   \r\n    margin: auto;\r\n    margin-top: -50px;\r\n    margin-bottom: 5px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst Check = styled(Checkbox) `\r\n    margin-left: 7.5%;\r\n    margin-top: 20px;\r\n    color: rgba(255,255,255,.9);\r\n`;\r\n\r\nexport { ContentIcon, Check };","import React, { useState, useEffect } from 'react';\r\nimport 'pretty-checkbox';\r\nimport { faUser, faEnvelope, faLock } from '@fortawesome/free-solid-svg-icons';\r\nimport { Dispatch } from 'redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { UserDispatcher } from '../../../store/User/actions';\r\nimport { Auth, getAuth, setAuth, removeAuth } from './../../../services/auth';\r\nimport * as styled from './styles';\r\nimport * as commonStyled from './../../../commonStyles/styles';\r\n\r\nexport interface StatePtrops {\r\n    handleFormRegister(): void;\r\n    hasError: boolean;\r\n}\r\n\r\nconst FormLogin = (props: StatePtrops) => {\r\n\r\n    const [login, setLogin] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [check, setCheck] = useState<boolean>(false);\r\n    const [loginError, setLoginError] = useState<boolean>(false);\r\n    const [passwordError, setPasswordError] = useState<boolean>(false);\r\n    const dispatch: Dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        const auth: Auth | null = getAuth();\r\n\r\n        if (auth) {\r\n            setLogin(auth.login);\r\n            setPassword(auth.password);\r\n        }\r\n    }, []);\r\n\r\n    const changeLogin = (event: React.FormEvent<HTMLInputElement>) => {\r\n        setLogin(event.currentTarget.value);\r\n    }\r\n\r\n    const changePassword = (event: React.FormEvent<HTMLInputElement>) => {\r\n        setPassword(event.currentTarget.value);\r\n    }\r\n\r\n    const handleLogin = (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n\r\n        let valid: boolean = true;\r\n        const expLogin: RegExp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        const expPassword: RegExp = /^(?=.*\\d)(?=.*[a-z])[0-9a-zA-Z!@#$%^&*?]{8,12}$/;\r\n        \r\n        if (!login || login.length < 9 || !expLogin.test(login)){\r\n            setLoginError(true);\r\n            valid = false;\r\n        }\r\n        else setLoginError(false);\r\n\r\n        if (!password || password.length < 8 || !expPassword.test(password)) {\r\n            setPasswordError(true);\r\n            valid = false;\r\n        }\r\n        else setPasswordError(false);\r\n\r\n        if (!valid) {\r\n            return;\r\n        }\r\n\r\n        if (check) {\r\n            const auth: Auth = { login, password };\r\n            setAuth(auth);\r\n        }\r\n        else removeAuth();\r\n\r\n        const userDispatcher = new UserDispatcher(dispatch);\r\n\r\n        userDispatcher.loginRequest({\r\n            email: login,\r\n            password: password\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleLogin}>\r\n                <commonStyled.LoginHeader>\r\n                    <commonStyled.Row />\r\n                        <styled.ContentIcon>\r\n                            <commonStyled.LoginTopIcon icon={faUser} />                        \r\n                        </styled.ContentIcon>\r\n                    <commonStyled.Row />\r\n                </commonStyled.LoginHeader>\r\n                <commonStyled.LoginContentInput>\r\n                    <commonStyled.InputIconContent>\r\n                        {\r\n                            loginError ? <commonStyled.IconError icon={faEnvelope} /> : <commonStyled.Icon icon={faEnvelope} />\r\n                        }\r\n                    </commonStyled.InputIconContent>\r\n                    <commonStyled.LoginInput placeholder={\"EMAIL\"} value={login} onChange={changeLogin} maxLength={80} />\r\n                </commonStyled.LoginContentInput>\r\n                <commonStyled.LoginContentInput>\r\n                    <commonStyled.InputIconContent>\r\n                        {\r\n                            passwordError ? <commonStyled.IconError icon={faLock} /> : <commonStyled.Icon icon={faLock} />\r\n                        }\r\n                    </commonStyled.InputIconContent>\r\n                    <commonStyled.LoginInput placeholder={\"SENHA\"} type=\"password\" value={password} onChange={changePassword} maxLength={12} />\r\n                </commonStyled.LoginContentInput>\r\n                {\r\n                    props.hasError ? <commonStyled.ContentErrorMessage>Usuário ou senha inválidos</commonStyled.ContentErrorMessage> : null\r\n                }\r\n                <commonStyled.LoginButton type=\"submit\" value=\"LOGIN\"/>\r\n                <commonStyled.ActionButton onClick={props.handleFormRegister}>REGISTRAR</commonStyled.ActionButton>\r\n                <styled.Check state={check} onChange={() => { setCheck(!check); }}>Lembrar-me</styled.Check>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormLogin;","import styled from 'styled-components';\r\n\r\nexport interface Config {\r\n    size?: number,\r\n    color?: string\r\n}\r\n\r\nconst ContentFileUpload = styled.label `\r\n    display: block;\r\n    width: 100px;\r\n    height: 100px;\r\n    border-radius: 100px;\r\n    border: 1px solid white;   \r\n    margin: auto;\r\n    margin-top: -50px;\r\n    margin-bottom: 5px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor:pointer;\r\n    &:hover {\r\n        background-color: rgba(255,255,255,0.5)\r\n    }\r\n`;\r\n\r\nconst UploadFile = styled.input `\r\n    display:none;\r\n`;\r\n\r\nexport { ContentFileUpload, UploadFile };","import React, { useState, useEffect } from 'react';\r\nimport { faUser, faLock, faEnvelope, faCamera } from '@fortawesome/free-solid-svg-icons';\r\nimport { Dispatch } from 'redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { UserDispatcher } from '../../../store/User/actions';\r\nimport * as styled from './styles';\r\nimport * as commonStyled from './../../../commonStyles/styles';\r\n\r\ninterface StateProps {\r\n    handleFormRegister(): void;\r\n    setLength(length: number): void;\r\n    emailExists?: boolean;\r\n}\r\n\r\nconst FormRegister = (props: StateProps) => {\r\n\r\n    const [login, setLogin] = useState<string>('');\r\n    const [name, setName] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [confirmPassword, setConfirmPassword] = useState<string>('');\r\n    const [avatar, setAvatar] = useState<string>('');\r\n    const [loginError, setLoginError] = useState<boolean>(false);\r\n    const [nameError, setNameError] = useState<boolean>(false);\r\n    const [passwordError, setPasswordError] = useState<boolean>(false);\r\n    const [confirmPasswordError, setConfirmPasswordError] = useState<boolean>(false);\r\n    const dispatch: Dispatch = useDispatch();\r\n    const userDispatcher = new UserDispatcher(dispatch);\r\n\r\n    useEffect(() => {\r\n        if (props.emailExists) props.setLength(446);\r\n    }, [props.emailExists]);\r\n\r\n    const changeLogin = (event: React.FormEvent<HTMLInputElement>) => {\r\n        setLogin(event.currentTarget.value);\r\n    }\r\n\r\n    const changeName = (event: React.FormEvent<HTMLInputElement>) => {\r\n        setName(event.currentTarget.value);\r\n    }\r\n\r\n    const changePassword = (event: React.FormEvent<HTMLInputElement>) => {\r\n        setPassword(event.currentTarget.value);\r\n    }\r\n\r\n    const changeConfirmPassword = (event: React.FormEvent<HTMLInputElement>) => {\r\n        setConfirmPassword(event.currentTarget.value);\r\n    }\r\n\r\n    const handleRegister = (event: React.FormEvent) => {\r\n        if (props.emailExists) userDispatcher.resetState();\r\n\r\n        event.preventDefault();\r\n\r\n        let valid: boolean = true;\r\n        const expLogin: RegExp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        const expPassword: RegExp = /^(?=.*\\d)(?=.*[a-z])[0-9a-zA-Z!@#$%^&*?]{8,12}$/;\r\n        let amountErrors: number = 0;\r\n        \r\n        if (!login || login.length < 9 || !expLogin.test(login)){\r\n            setLoginError(true);\r\n            valid = false;\r\n            amountErrors++;\r\n        }\r\n        else setLoginError(false);\r\n\r\n        if (!name || name.length < 6) {\r\n            setNameError(true);\r\n            valid = false;\r\n            amountErrors++;\r\n        }\r\n        else setNameError(false);\r\n\r\n        if (!password || password.length < 8 || !expPassword.test(password)) {\r\n            setPasswordError(true);\r\n            valid = false;\r\n            amountErrors++;\r\n        }\r\n        else setPasswordError(false);\r\n\r\n        if (password !== confirmPassword) {\r\n            setConfirmPasswordError(true);\r\n            valid = false;\r\n            amountErrors++;\r\n        }\r\n        else setConfirmPasswordError(false);\r\n\r\n        if (!valid) {\r\n            props.setLength(428 + (amountErrors * 18));\r\n            return;\r\n        }\r\n        else props.setLength(428);\r\n\r\n        userDispatcher.registerRequest({\r\n            email: login,\r\n            password: password,\r\n            name: name,\r\n            avatar: avatar.split(',')[1]\r\n        });\r\n    }\r\n\r\n    const toBase64 = (file: any) => new Promise<string>((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result?.toString());\r\n        reader.onerror = error => reject(error);\r\n    });\r\n\r\n    const handleFileSelected = async (event: any) => {\r\n        const imageBase64 = await toBase64(event.target.files[0]);\r\n        setAvatar(imageBase64);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleRegister}>\r\n                <commonStyled.LoginHeader>\r\n                    <commonStyled.Row />\r\n                        <styled.ContentFileUpload htmlFor=\"upload-file\">\r\n                            {\r\n                                avatar ? <commonStyled.Img src={avatar} alt=\"fnsfns\"/> : <commonStyled.LoginTopIcon icon={faCamera} />\r\n                            }                        \r\n                        </styled.ContentFileUpload>\r\n                    <commonStyled.Row />\r\n                </commonStyled.LoginHeader>\r\n                <styled.UploadFile type=\"file\" id=\"upload-file\" onChange={handleFileSelected} accept=\".jpg,.jpeg,.png\" multiple={false}  />\r\n                <commonStyled.LoginContentInput>\r\n                    <commonStyled.InputIconContent>\r\n                        {\r\n                            loginError ? <commonStyled.IconError icon={faEnvelope} /> : <commonStyled.Icon icon={faEnvelope} />\r\n                        }\r\n                    </commonStyled.InputIconContent>\r\n                    <commonStyled.LoginInput placeholder={\"EMAIL\"} value={login} onChange={changeLogin} maxLength={80} />\r\n                </commonStyled.LoginContentInput>\r\n                {\r\n                    loginError ? <commonStyled.ContentErrorMessage>E-mail inválido ou já cadastrado</commonStyled.ContentErrorMessage> : null\r\n                }\r\n                {\r\n                    props.emailExists ? <commonStyled.ContentErrorMessage>E-mail já existe</commonStyled.ContentErrorMessage> : null\r\n                }\r\n\r\n                <commonStyled.LoginContentInput>\r\n                    <commonStyled.InputIconContent>\r\n                        {\r\n                            nameError ? <commonStyled.IconError icon={faUser} /> : <commonStyled.Icon icon={faUser} />\r\n                        }\r\n                    </commonStyled.InputIconContent>\r\n                    <commonStyled.LoginInput placeholder={\"NOME\"} value={name} onChange={changeName} maxLength={16} />\r\n                </commonStyled.LoginContentInput>\r\n                {\r\n                    nameError ? <commonStyled.ContentErrorMessage>O nome deve conter entre 6 e 16 caracteres</commonStyled.ContentErrorMessage> : null\r\n                }\r\n                \r\n                <commonStyled.LoginContentInput>\r\n                    <commonStyled.InputIconContent>\r\n                        {\r\n                            passwordError ? <commonStyled.IconError icon={faLock} /> : <commonStyled.Icon icon={faLock} />\r\n                        }\r\n                    </commonStyled.InputIconContent>\r\n                    <commonStyled.LoginInput placeholder={\"SENHA\"} type=\"password\" value={password} onChange={changePassword} maxLength={12} />\r\n                </commonStyled.LoginContentInput>\r\n                {\r\n                    passwordError ? <commonStyled.ContentErrorMessage>A senha deve conter letras e numeros e de 8 a 12 caracteres</commonStyled.ContentErrorMessage> : null\r\n                }\r\n\r\n                <commonStyled.LoginContentInput>\r\n                    <commonStyled.InputIconContent>\r\n                        {\r\n                            confirmPasswordError ? <commonStyled.IconError icon={faLock} /> : <commonStyled.Icon icon={faLock} />\r\n                        }\r\n                    </commonStyled.InputIconContent>\r\n                    <commonStyled.LoginInput placeholder={\"CONFIRMAR SENHA\"} type=\"password\" value={confirmPassword} onChange={changeConfirmPassword} maxLength={12} />\r\n                </commonStyled.LoginContentInput>\r\n                {\r\n                    confirmPasswordError ? <commonStyled.ContentErrorMessage>As senhas estão diferentes</commonStyled.ContentErrorMessage> : null\r\n                }\r\n\r\n                <commonStyled.LoginButton type=\"submit\" value=\"CADASTRAR\"/>\r\n                <commonStyled.ActionButton onClick={props.handleFormRegister}>VOLTAR</commonStyled.ActionButton>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormRegister;","import styled from 'styled-components';\r\n\r\nexport interface Config {\r\n    size?: number\r\n}\r\n\r\nconst Main = styled.div `\r\n    height: 100vh;\r\n    width: 100vw;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    background-image: linear-gradient(135deg, #EE82EE, #FF00FF, #BA55D3, #8A2BE2, #1E90FF, #0080ff, #0040ff, #0000ff);\r\n    overflow-x: auto;\r\n`;\r\n\r\nconst Body = styled.div `\r\n    height: ${(props: Config) => props.size ? props.size : '360'}px;\r\n    width: 350px;    \r\n    border-bottom: 1px solid white;\r\n    margin-bottom: 50px;\r\n`;\r\n\r\nconst Footer = styled.div `\r\n    font-weight: bold;\r\n    font-size: 15px;\r\n    margin-top: 10px;\r\n    color: rgba(255,255,255,0.9);\r\n`;\r\n\r\nconst LoadText = styled.p `\r\n    color:  white;\r\n    font-size: 22px;\r\n`;\r\n\r\nexport { Main, Body, Footer, LoadText };","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Loader from 'react-loader-spinner';\r\nimport { ApplicationState } from './../../store/rootReducer';\r\nimport { UserState } from './../../store/User/types';\r\nimport { TalkState } from './../../store/Talk/types';\r\nimport { isAuthenticated } from './../../services/auth';\r\nimport FormLogin from './FormLogin/index';\r\nimport FormRegister from './FormRegister/index';\r\nimport * as styled from './styles';\r\n\r\nconst Login = () => {\r\n\r\n    const [registerContent, setRegisterContent] = useState<boolean>(false);\r\n    const [lengthBodyRegister, setLengthBodyRegister] = useState<number>(428);\r\n    const userState: UserState = useSelector<ApplicationState, UserState>((state: ApplicationState) => state.user);\r\n    const talkState: TalkState = useSelector<ApplicationState, TalkState>((state: ApplicationState) => state.talk);\r\n\r\n    const handleFormRegister = () => {\r\n        setRegisterContent(!registerContent);\r\n        setLengthBodyRegister(428);\r\n    }\r\n\r\n    const formLogin = () => (\r\n        <>\r\n            <styled.Body>\r\n                <FormLogin handleFormRegister={handleFormRegister} hasError={userState.fail} />\r\n            </styled.Body>\r\n            <styled.Footer>\r\n                &copy; GADev - GAChat - 2020\r\n            </styled.Footer>\r\n        </>\r\n    );\r\n\r\n    const formRegister = () => (\r\n         <>\r\n            <styled.Body size={lengthBodyRegister}>\r\n                <FormRegister handleFormRegister={handleFormRegister} setLength={setLengthBodyRegister} emailExists={userState.registerError} />\r\n            </styled.Body>\r\n            <styled.Footer >\r\n                &copy; GADev - GAChat - 2020\r\n            </styled.Footer>\r\n        </>\r\n    );\r\n\r\n    const loading = () => (\r\n        <>\r\n            <styled.LoadText>Carregando...</styled.LoadText>\r\n            <Loader type=\"Oval\" color=\"white\" height={60}/>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <styled.Main>\r\n            {\r\n                userState.authenticated && isAuthenticated() && talkState.completed ? <Redirect to=\"/talk\" /> : null\r\n            }\r\n            {\r\n                userState.loading || talkState.loading ? loading() : (registerContent ? formRegister() : formLogin())\r\n            }\r\n            \r\n        </styled.Main>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport store from './store/index';\nimport './index.css';\nimport PrivateRoute from './util/routes';\nimport Chat from './pages/Chat/index';\nimport Login from './pages/Login/index';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Provider store={store}>\n        <Route exact path=\"/chat\" component={Login} />\n        <PrivateRoute exact path=\"/talk\" component={Chat} />\n      </Provider>\n    </Switch>\n  </BrowserRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}